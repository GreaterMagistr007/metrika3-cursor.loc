Техническое задание на разработку веб-приложения "Личный кабинет для управления вендинговыми аппаратами"
Версия: 5.0 (Финальная)
Дата составления: 26.05.2024

Добавлен новый модуль: Система сообщений и уведомлений

2.7. Модуль системы сообщений и уведомлений
2.7.1. Назначение:
Централизованная система для отправки целевых сообщений пользователям из административной панели и автоматической отправки уведомлений при выполнении бизнес-событий.

2.7.2. Типы сообщений:

Всплывающие уведомления (Toast): Короткоживущие сообщения, которые показываются автоматически при выполнении действия (например, "Пользователь добавлен", "Настройки сохранены"). Закрываются автоматически или по таймауту. Не хранятся в базе.

Персистентные сообщения (Persistent): Сообщения, которые хранятся в базе данных и показываются пользователю до момента явного закрытия ("прочтения"). Используются для важной информации.

Информационные сообщения (Broadcast): Особый подтип персистентных сообщений, управляемых из панели администратора. Не могут быть закрыты пользователем. Скрываются только при выполнении триггера или отключении в админке.

2.7.3. Функциональные требования:

2.7.3.1. Отправка с бэкенда:

Должен быть реализован сервис для отправки сообщений любого типа.

Параметры сообщения: type (success, error, warning, info, system), text, url (опционально, кликабельная ссылка), button_text (опционально, текст кнопки), button_url (опционально, ссылка для кнопки).

Сообщения должны прикрепляться к ответам API (например, в заголовках или специальном поле тела ответа) для автоматического отображения на фронтенде.

2.7.3.2. Обработка на фронтенде:

Должен быть реализован глобальный интерцептор, который при получении любого ответа от API проверяет наличие в нем сообщения и отображает его пользователю в соответствии с типом.

Для персистентных и информационных сообщений должна быть создана отдельная страница/виджет "Центр уведомлений".

2.7.3.3. Административное управление (Broadcast):

В панели администратора должен быть реализован интерфейс для создания информационных сообщений.

Целевая аудитория: Возможность выбрать получателя: конкретный пользователь, все пользователи кабинета, все пользователи системы.

Типы сообщений: Выбор из предустановленных типов (Обновление, Техработы, Важное уведомление, Задолженность).

Триггеры: Возможность установить условие автоматического скрытия сообщения (например, "скрыть при оплате счета", "скрыть после 01.01.2025").

Статус: Возможность включать/отключать сообщение.

2.7.3.4. Механизм работы персистентных сообщений:

Сообщения хранятся в базе данных в таблице user_messages со связью user_id.

Сообщения для кабинета хранятся в таблице cabinet_messages и дублируются в user_messages для каждого пользователя кабинета в момент их прочтения/закрытия.

При любом запросе фронтенд проверяет наличие непрочитанных сообщений для пользователя и отображает их.

При клике на "Закрыть" сообщение отмечается как прочитанное в таблице user_messages и более не показывается.

2.7.3.5. Механизм работы информационных (Broadcast) сообщений:

Управление через панель администратора.

Невозможность закрытия со стороны пользователя.

Отображаются до срабатывания триггера или отключения администратором.

2.7.4. Структура таблиц БД:

Таблица messages:

id, type, title, text, url, button_text, button_url, is_active (boolean), trigger_condition (json, nullable), expires_at (timestamp, nullable), created_at, updated_at.

Таблица message_recipients:

id, message_id, recipient_type ('user', 'cabinet', 'all'), recipient_id (nullable, ID пользователя или кабинета), created_at.

Таблица user_messages (связь пользователь-сообщение):

id, user_id, message_id, is_read (boolean, default false), read_at (timestamp, nullable), created_at, updated_at.

Дополнения к другим разделам
В Раздел 2.5. Панель Администратора добавлен пункт:

2.5.4. Полный функционал управления системой сообщений: создание, редактирование, отключение информационных сообщений для пользователей, кабинетов и всех пользователей системы. Просмотр статуса доставки и прочтения.

В Раздел 4.1. Backend добавлен пункт:

4.1.1. Реализовать сервис MessageService с методами send(), broadcast(), markAsRead().

В Раздел 4.2. Frontend добавлен пункт:

4.2.1. Реализовать глобальный интерцептор для обработки сообщений из ответов API.

4.2.2. Реализовать компонент "Центр уведомлений" для отображения истории персистентных сообщений.

В Раздел 5. Этапы приемки (Фаза 1) добавлены пункты:
9. Реализована система сообщений: отправка с бэкенда, отображение на фронтенде, отметка о прочтении.
10. Реализован функционал управления информационными сообщениями в панели администратора.
11. Реализована бизнес-логика обработки триггеров для автоматического скрытия сообщений.

ТЗ принято к исполнению.

Составитель: ____________________ / [ФИО] /
Заказчик: ____________________ / [ФИО] /

напиши полный текст технического задания
Техническое задание на разработку веб-приложения "Личный кабинет для управления вендинговыми аппаратами"
Версия: 5.0 (Финальная)
Дата составления: 26.05.2024

1. Введение
1.1. Наименование проекта
Веб-приложение "Личный кабинет для управления вендинговыми аппаратами"

1.2. Цель проекта
Создание кроссплатформенного веб-приложения (браузерная версия + Telegram Mini-App) для централизованного управления сетью вендинговых аппаратов.

Фаза 1: Разработка базового каркаса с системой аутентификации, управления кабинетами, гибкой системой ролевого доступа, аудит-логированием, панелью администратора и системой сообщений.

1.3. Технологический стек
Бэкенд: Laravel 12, PHP 8.4+, MariaDB

Фронтенд: Vue 3, Composition API, Vue Router, Pinia, Vite, Axios

Стилизация: TailwindCSS, Headless UI

Аутентификация: Laravel Sanctum, Telegram Login Widget

Документация: Swagger (OpenAPI 3.0) с пакетом darkaonline/l5-swagger

Кеширование: Redis/Memcached

1.4. Термины и определения
Кабинет - виртуальное пространство для управления аппаратами

Владелец кабинета - пользователь с полными правами управления

Разрешение (Permission) - атомарное право на действие

Persistent сообщение - сообщение, хранящееся до явного закрытия

Broadcast сообщение - системное сообщение от администрации

2. Функциональные требования
2.1. Модуль аутентификации и авторизации
Браузерная авторизация по номеру телефона с подтверждением через Telegram Bot

Автоматическая авторизация в Telegram Mini-App через initData

Привязка номера телефона к аккаунту Telegram

Длительное хранение сессии

2.2. Модуль управления кабинетами
Создание кабинета пользователем

Приглашение пользователей по номеру телефона или через ссылку

Механизм передачи прав владения

2.3. Система ролей и прав
Гибкая система разрешений на основе таблиц:

permissions

cabinets (с полем owner_id)

cabinet_user

cabinet_user_permissions

Назначение прав через интерфейс

Возможность передачи прав владения

2.4. Модуль логирования действий (Audit Log)
Таблица audit_logs для записи действий

Асинхронная запись через очередь задач

Фиксация: пользователь, кабинет, событие, описание, метаданные

Обязательное логирование ключевых действий

2.5. Панель Администратора
Доступ только для super_admin

Управление пользователями и кабинетами

Просмотр и фильтрация логов аудита

Управление системой сообщений

2.6. Базовый модуль кабинета
Дашборд с основной информацией

Раздел настроек управления пользователями и правами

2.7. Система сообщений и уведомлений
2.7.1. Типы сообщений
Toast: Короткоживущие уведомления (не хранятся в БД)

Persistent: Сообщения, хранящиеся до явного закрытия

Broadcast: Системные сообщения от администрации

2.7.2. Функциональность
Отправка сообщений с бэкенда с параметрами: type, text, url, button_text, button_url

Глобальный интерцептор на фронтенде для обработки сообщений

Центр уведомлений для просмотра истории сообщений

Административное управление broadcast-сообщениями

2.7.3. Механизмы работы
Хранение сообщений в таблицах: messages, message_recipients, user_messages

Отметка о прочтении персистентных сообщений

Автоматическое скрытие по триггерам для broadcast-сообщений

2.7.4. Административное управление
Создание сообщений для: конкретного пользователя, кабинета, всех пользователей

Установка триггеров автоматического скрытия

Включение/отключение сообщений

Просмотр статуса доставки и прочтения

3. Нефункциональные требования
3.1. Производительность
Время отклика API ≤ 200мс для критических операций

Кеширование данных пользователей и разрешений

Асинхронная обработка ресурсоемких задач

3.2. Безопасность
Защита от XSS, CSRF, SQL-инъекций

Валидация всех входящих данных

Хеширование токенов и чувствительных данных

3.3. Масштабируемость
Модульная архитектура для добавления нового функционала

Оптимизированная структура базы данных

3.4. Надежность
Асинхронная запись логов

Резервное копирование критических данных

Обработка ошибок и исключений

3.5. Адаптивность
Полная поддержка мобильных устройств

Кроссбраузерная совместимость

4. Техническая реализация
4.1. Backend (Laravel)
PSR-12, strict typing, PHP 8.4+

Архитектура MVC + Service/Repository

Final классы для моделей и контроллеров

RESTful JSON API с авторизацией

Автогенерация Swagger-документации

Миграции базы данных

4.2. Frontend (Vue 3)
Composition API, Pinia для управления состоянием

Vue Router с lazy-loading

Axios с интерцепторами

Адаптивная верстка

4.3. Интерфейс пользователя
Headless UI для интерактивных компонентов

TailwindCSS для стилизации

PrimeVue для сложных компонентов (по согласованию)

4.4. База данных
MariaDB с оптимизированными индексами

Сидеры для начального наполнения permissions

Структура таблиц для системы сообщений

4.5. Администрирование
SQL-запросы для экстренного управления в README.md

Laravel Scheduler для фоновых задач

5. Этапы приемки (Фаза 1)
✅ Реализация аутентификации (браузер + Telegram Mini-App)

✅ Система управления кабинетами и пользователями

✅ Гибкая система ролей и прав

✅ Модуль аудит-логирования

✅ Панель администратора с базовым функционалом

✅ Система сообщений и уведомлений

✅ Автогенерация Swagger-документации

✅ Полная документация в README.md

✅ Соответствие техническим требованиям

6. Приложения
Приложение А: Начальные разрешения
user.invite - Приглашение пользователей

user.remove - Удаление пользователей

settings.view - Просмотр настроек

settings.edit - Редактирование настроек

message.read - Просмотр сообщений

message.manage - Управление сообщениями

Приложение Б: SQL для смены владельца
sql
UPDATE cabinets
SET owner_id = {NEW_OWNER_ID}
WHERE id = {CABINET_ID}
AND EXISTS (
    SELECT 1 FROM cabinet_user 
    WHERE cabinet_id = {CABINET_ID} 
    AND user_id = {NEW_OWNER_ID}
);
Приложение В: Структура audit_logs
sql
CREATE TABLE audit_logs (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NULL,
    cabinet_id BIGINT NULL,
    subject_type VARCHAR(255) NULL,
    subject_id BIGINT NULL,
    event VARCHAR(255) NOT NULL,
    description TEXT NULL,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    metadata JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
ТЗ принято к исполнению.

Составитель: ____________________ / [ФИО] /
Заказчик: ____________________ / [ФИО] /